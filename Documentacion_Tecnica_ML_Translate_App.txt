
ML TRANSLATE APP - DOCUMENTACI√ìN T√âCNICA
============================================================

Desarrollado por: Daniel Vega Miranda & Abraham Reyes Cuevas
Fecha: 22 de June de 2025
Versi√≥n: 2.0 - Edici√≥n Universitaria

============================================================


============================================================
DOCUMENTACI√ìN T√âCNICA
============================================================


----------------------------------------
ML Translate App - Arquitectura y Implementaci√≥n
----------------------------------------



[IMPORTANTE] Desarrollado por:

  ‚Ä¢ Daniel Vega Miranda
  ‚Ä¢ Abraham Reyes Cuevas

**Fecha:** Junio 2025
**Versi√≥n:** 2.0 - Edici√≥n Universitaria


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



----------------------------------------
üèóÔ∏è Arquitectura General
----------------------------------------



‚Ä¢ STACK TECNOL√ìGICO:
  ------------------

  ‚Ä¢ **Lenguaje:** Kotlin
  ‚Ä¢ **Framework:** Android SDK (API 21+)
  ‚Ä¢ **ML Framework:** Google ML Kit
  ‚Ä¢ **C√°mara:** CameraX
  ‚Ä¢ **UI:** Material Design Components
  ‚Ä¢ **Persistencia:** SharedPreferences + Gson
  ‚Ä¢ **Arquitectura:** MVVM Pattern con Fragment-based UI


‚Ä¢ ESTRUCTURA DEL PROYECTO:
  ------------------------


--- C√ìDIGO ---
    app/src/main/java/com/example/translateApp/
    ‚îú‚îÄ‚îÄ model/
    ‚îÇ   ‚îî‚îÄ‚îÄ AnalysisHistoryItem.kt
    ‚îú‚îÄ‚îÄ utils/
    ‚îÇ   ‚îú‚îÄ‚îÄ AnalysisHistory.kt
    ‚îÇ   ‚îî‚îÄ‚îÄ CameraUtils.kt
    ‚îú‚îÄ‚îÄ view/
    ‚îÇ   ‚îú‚îÄ‚îÄ TranslateActivity.kt (Actividad Principal)
    ‚îÇ   ‚îú‚îÄ‚îÄ HistoryActivity.kt
    ‚îÇ   ‚îú‚îÄ‚îÄ MLKitFeaturesDialog.kt
    ‚îÇ   ‚îú‚îÄ‚îÄ ImageLabelingDialog.kt
    ‚îÇ   ‚îú‚îÄ‚îÄ ImageLabelingDialogRealtime.kt
    ‚îÇ   ‚îú‚îÄ‚îÄ BarcodeScannerDialogRealtime.kt
    ‚îÇ   ‚îú‚îÄ‚îÄ FaceDetectionDialogRealtime.kt
    ‚îÇ   ‚îú‚îÄ‚îÄ LandmarkDetectionDialogRealtime.kt
    ‚îÇ   ‚îî‚îÄ‚îÄ HistoryDetailDialog.kt
    ‚îî‚îÄ‚îÄ res/
    ‚îú‚îÄ‚îÄ layout/ (Layouts XML)
    ‚îî‚îÄ‚îÄ values/ (Strings, Colors, Themes)
--- FIN C√ìDIGO ---



----------------------------------------
üß© Componentes Principales
----------------------------------------



‚Ä¢ 1. TRANSLATEACTIVITY.KT
  -----------------------

**Responsabilidad:** Actividad principal que maneja traducci√≥n b√°sica y coordinaci√≥n general.


[IMPORTANTE] Caracter√≠sticas clave:

  ‚Ä¢ Detecci√≥n autom√°tica de idioma
  ‚Ä¢ Traducci√≥n offline/online
  ‚Ä¢ OCR integrado
  ‚Ä¢ Navegaci√≥n a funcionalidades ML Kit


[IMPORTANTE] M√©todos p√∫blicos expuestos:


--- C√ìDIGO ---
    fun openImageSelector() // Para OCR desde men√∫ ML Kit
    fun focusOnTextInput()  // Para enfocar campo de texto
--- FIN C√ìDIGO ---



‚Ä¢ 2. MLKITFEATURESDIALOG.KT
  -------------------------

**Responsabilidad:** Men√∫ central para acceso a todas las funcionalidades ML Kit.


[IMPORTANTE] Funcionalidades:

  ‚Ä¢ Navegaci√≥n a di√°logos especializados
  ‚Ä¢ Coordinaci√≥n con actividad principal
  ‚Ä¢ Interfaz unificada para acceso a ML Kit


‚Ä¢ 3. DI√ÅLOGOS DE TIEMPO REAL
  --------------------------



  ‚ó¶ BarcodeScannerRealtimeDialog.kt

**Tecnolog√≠a:** ML Kit Barcode Scanning + CameraX

[IMPORTANTE] Formatos soportados:

  ‚Ä¢ QR_CODE, AZTEC, EAN_13, EAN_8
  ‚Ä¢ UPC_A, UPC_E, CODE_39, CODE_93
  ‚Ä¢ CODE_128, DATA_MATRIX, PDF417, ITF, CODABAR


[IMPORTANTE] Implementaci√≥n:


--- C√ìDIGO ---
    private class BarcodeAnalyzer(private val listener: (List<Barcode>) -> Unit) : ImageAnalysis.Analyzer {
    override fun analyze(imageProxy: ImageProxy) {
    val mediaImage = imageProxy.image
    if (mediaImage != null) {
    val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
    val scanner = BarcodeScanning.getClient(options)
    scanner.process(image)
    .addOnSuccessListener { barcodes -> listener(barcodes) }
    .addOnCompleteListener { imageProxy.close() }
    }
    }
    }
--- FIN C√ìDIGO ---



  ‚ó¶ FaceDetectionDialogRealtime.kt

**Tecnolog√≠a:** ML Kit Face Detection + CameraX

[IMPORTANTE] Caracter√≠sticas detectadas:

  ‚Ä¢ Posici√≥n y dimensiones del rostro
  ‚Ä¢ Probabilidad de sonrisa
  ‚Ä¢ Estado de ojos (abierto/cerrado)
  ‚Ä¢ √Ångulos de rotaci√≥n (Euler Y, Z)
  ‚Ä¢ Seguimiento facial


[IMPORTANTE] Configuraci√≥n del detector:


--- C√ìDIGO ---
    val options = FaceDetectorOptions.Builder()
    .setPerformanceMode(FaceDetectorOptions.PERFORMANCE_MODE_FAST)
    .setClassificationMode(FaceDetectorOptions.CLASSIFICATION_MODE_ALL)
    .setMinFaceSize(0.15f)
    .build()
--- FIN C√ìDIGO ---



  ‚ó¶ ImageLabelingRealtimeDialog.kt

**Tecnolog√≠a:** ML Kit Image Labeling + CameraX

[IMPORTANTE] Capacidades:

  ‚Ä¢ Identificaci√≥n de objetos en tiempo real
  ‚Ä¢ Niveles de confianza configurables
  ‚Ä¢ Etiquetado multicategor√≠a


  ‚ó¶ LandmarkDetectionDialogRealtime.kt

**Tecnolog√≠a:** ML Kit Image Labeling (filtrado por palabras clave) + CameraX

[IMPORTANTE] Enfoque especializado:

  ‚Ä¢ Filtrado por palabras clave arquitect√≥nicas
  ‚Ä¢ Identificaci√≥n de monumentos y edificios
  ‚Ä¢ An√°lisis de elementos hist√≥ricos


[IMPORTANTE] Palabras clave filtradas:


--- C√ìDIGO ---
    private val LANDMARK_KEYWORDS = setOf(
    "building", "architecture", "monument", "statue", "church",
    "cathedral", "temple", "palace", "castle", "tower", "bridge",
    "landmark", "museum", "historical", "ancient", "art"
    )
--- FIN C√ìDIGO ---



----------------------------------------
üé• Implementaci√≥n CameraX
----------------------------------------



‚Ä¢ CONFIGURACI√ìN BASE:
  -------------------


--- C√ìDIGO ---
    private fun startCamera() {
    val cameraProviderFuture = ProcessCameraProvider.getInstance(requireContext())
    
    cameraProviderFuture.addListener({
    val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()
    
    val preview = Preview.Builder().build().also {
    it.setSurfaceProvider(cameraPreview?.surfaceProvider)
    }
    
    val imageAnalyzer = ImageAnalysis.Builder()
    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
    .build()
    .also {
    it.setAnalyzer(cameraExecutor, AnalyzerImplementation { results ->
    if (isAnalyzing) processResults(results)
    })
    }
    
    cameraProvider.bindToLifecycle(this, cameraSelector, preview, imageAnalyzer)
    }, ContextCompat.getMainExecutor(requireContext()))
    }
--- FIN C√ìDIGO ---



‚Ä¢ ESTRATEGIA DE AN√ÅLISIS:
  -----------------------

  ‚Ä¢ **Backpressure:** `STRATEGY_KEEP_ONLY_LATEST` para rendimiento √≥ptimo
  ‚Ä¢ **Threading:** `SingleThreadExecutor` para procesamiento ML
  ‚Ä¢ **UI Updates:** `runOnUiThread` para actualizaci√≥n segura de UI


----------------------------------------
üíæ Sistema de Persistencia
----------------------------------------



‚Ä¢ MODELO DE DATOS:
  ----------------


--- C√ìDIGO ---
    @Parcelize
    data class AnalysisHistoryItem(
    val id: String = "",
    val type: String = "", // text_recognition, barcode_scanning, etc.
    val inputText: String = "",
    val result: String = "",
    val confidence: Float = 0f,
    val timestamp: Long = System.currentTimeMillis(),
    val additionalData: Map<String, String> = emptyMap()
    ) : Parcelable
--- FIN C√ìDIGO ---



‚Ä¢ GESTI√ìN DE HISTORIAL:
  ---------------------


--- C√ìDIGO ---
    object AnalysisHistory {
    private const val MAX_HISTORY_SIZE = 100
    
    fun addToHistory(context: Context, item: AnalysisHistoryItem) {
    val prefs = getPreferences(context)
    val currentHistory = getHistory(context).toMutableList()
    currentHistory.add(0, item.copy(id = UUID.randomUUID().toString()))
    
    if (currentHistory.size > MAX_HISTORY_SIZE) {
    currentHistory.removeAt(currentHistory.size - 1)
    }
    
    val json = gson.toJson(currentHistory)
    prefs.edit().putString(HISTORY_KEY, json).apply()
    }
    }
--- FIN C√ìDIGO ---



----------------------------------------
üîí Gesti√≥n de Permisos
----------------------------------------



‚Ä¢ PERMISOS IMPLEMENTADOS:
  -----------------------


--- C√ìDIGO ---
    companion object {
    private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    private const val PERMISSION_REQUEST_CODE = 1001
    }
    
    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
    ContextCompat.checkSelfPermission(requireContext(), it) == PackageManager.PERMISSION_GRANTED
    }
--- FIN C√ìDIGO ---



‚Ä¢ FLUJO DE PERMISOS:
  ------------------

1. Verificaci√≥n al inicializar di√°logo
2. Solicitud autom√°tica si no est√°n concedidos
3. Fallback a modo galer√≠a si se deniegan
4. Mensaje informativo al usuario


----------------------------------------
üèóÔ∏è Patrones de Dise√±o Implementados
----------------------------------------



‚Ä¢ 1. OBSERVER PATTERN
  -------------------

  ‚Ä¢ Callback listeners para an√°lisis ML Kit
  ‚Ä¢ UI updates mediante `runOnUiThread`


‚Ä¢ 2. STRATEGY PATTERN
  -------------------

  ‚Ä¢ Diferentes analizadores para cada tipo de ML Kit
  ‚Ä¢ Interfaz com√∫n `ImageAnalysis.Analyzer`


‚Ä¢ 3. FACTORY PATTERN
  ------------------

  ‚Ä¢ Creaci√≥n de di√°logos especializados
  ‚Ä¢ Configuraci√≥n de detectores ML Kit


‚Ä¢ 4. SINGLETON PATTERN
  --------------------

  ‚Ä¢ `AnalysisHistory` para gesti√≥n centralizada
  ‚Ä¢ `CameraUtils` para utilidades compartidas


----------------------------------------
üìä Optimizaciones de Rendimiento
----------------------------------------



‚Ä¢ ML KIT:
  -------

  ‚Ä¢ **Confidence Threshold:** Configurado por funcionalidad
  ‚Ä¢ **Performance Mode:** FAST para tiempo real, ACCURATE para an√°lisis est√°tico
  ‚Ä¢ **Image Resolution:** Optimizada autom√°ticamente por CameraX


‚Ä¢ CAMERAX:
  --------

  ‚Ä¢ **BackpressureStrategy:** Solo procesa frame m√°s reciente
  ‚Ä¢ **Threading:** Ejecutor dedicado para ML processing
  ‚Ä¢ **Memory Management:** Cierre autom√°tico de `ImageProxy`


‚Ä¢ UI:
  ---

  ‚Ä¢ **Fragment-based:** Carga modular de funcionalidades
  ‚Ä¢ **RecyclerView:** Para historial con ViewHolder pattern
  ‚Ä¢ **Lazy Loading:** Inicializaci√≥n bajo demanda


----------------------------------------
üîß Configuraci√≥n Build
----------------------------------------



‚Ä¢ DEPENDENCIES CLAVE:
  -------------------


--- C√ìDIGO ---
    // CameraX para c√°mara en tiempo real
    implementation "androidx.camera:camera-core:1.3.1"
    implementation "androidx.camera:camera-camera2:1.3.1"
    implementation "androidx.camera:camera-lifecycle:1.3.1"
    implementation "androidx.camera:camera-view:1.3.1"
    
    // ML Kit modules
    implementation 'com.google.mlkit:translate:17.0.2'
    implementation 'com.google.mlkit:language-id:17.0.5'
    implementation 'com.google.mlkit:text-recognition:16.0.0'
    implementation 'com.google.mlkit:barcode-scanning:17.2.0'
    implementation 'com.google.mlkit:image-labeling:17.0.7'
    implementation 'com.google.mlkit:face-detection:16.1.5'
    
    // Persistencia y utilidades
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.cardview:cardview:1.0.0'
--- FIN C√ìDIGO ---



‚Ä¢ CONFIGURACI√ìN PROGUARD:
  -----------------------

  ‚Ä¢ Keep classes ML Kit
  ‚Ä¢ Preserve modelo annotations
  ‚Ä¢ Mantener interfaces CameraX


----------------------------------------
üß™ Testing y Debugging
----------------------------------------



‚Ä¢ ESTRATEGIAS DE DEBUG:
  ---------------------

  ‚Ä¢ Logging detallado con tags espec√≠ficos
  ‚Ä¢ Try-catch comprehensivo para ML operations
  ‚Ä¢ Validaci√≥n de permisos en runtime
  ‚Ä¢ Error handling para fallos de c√°mara


‚Ä¢ M√âTRICAS DE PERFORMANCE:
  ------------------------

  ‚Ä¢ Tiempo de inicializaci√≥n de c√°mara
  ‚Ä¢ Latencia de an√°lisis ML Kit
  ‚Ä¢ Uso de memoria durante operaciones
  ‚Ä¢ Framerate de an√°lisis en tiempo real


----------------------------------------
üöÄ Deployment
----------------------------------------



‚Ä¢ REQUISITOS M√çNIMOS:
  -------------------

  ‚Ä¢ Android API 21+ (Android 5.0)
  ‚Ä¢ Camera2 API support
  ‚Ä¢ M√≠nimo 2GB RAM para rendimiento √≥ptimo
  ‚Ä¢ 50MB espacio libre para paquetes ML Kit


‚Ä¢ OPTIMIZACIONES APK:
  -------------------

  ‚Ä¢ Modularizaci√≥n ML Kit (descarga bajo demanda)
  ‚Ä¢ Compresi√≥n de recursos
  ‚Ä¢ Eliminaci√≥n de c√≥digo no utilizado
  ‚Ä¢ Vector drawables para iconograf√≠a


----------------------------------------
üîÆ Arquitectura Extensible
----------------------------------------



‚Ä¢ PUNTOS DE EXTENSI√ìN:
  --------------------

1. **Nuevos Detectores ML Kit:** Implementar `ImageAnalysis.Analyzer`
2. **Nuevos Formatos de Export:** Extender `AnalysisHistory`
3. **UI Personalizada:** Fragment modular system
4. **Nuevos Idiomas:** Configuraci√≥n en `strings.xml`


‚Ä¢ CONSIDERACIONES FUTURAS:
  ------------------------

  ‚Ä¢ Integraci√≥n con Firebase ML Kit
  ‚Ä¢ Soporte para modelos custom TensorFlow Lite
  ‚Ä¢ An√°lisis de video en tiempo real
  ‚Ä¢ Sincronizaci√≥n cloud del historial


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



----------------------------------------
üìã Resumen T√©cnico
----------------------------------------


**Funcionalidades ML Kit Implementadas:** 6+
  ‚Ä¢ ‚úÖ Text Recognition (OCR)
  ‚Ä¢ ‚úÖ Language Translation
  ‚Ä¢ ‚úÖ Barcode Scanning (Real-time)
  ‚Ä¢ ‚úÖ Image Labeling (Real-time)
  ‚Ä¢ ‚úÖ Face Detection (Real-time)
  ‚Ä¢ ‚úÖ Landmark Detection (Real-time)


[IMPORTANTE] Caracter√≠sticas T√©cnicas:

  ‚Ä¢ ‚úÖ C√°mara en tiempo real (CameraX)
  ‚Ä¢ ‚úÖ An√°lisis offline/online
  ‚Ä¢ ‚úÖ Historial persistente
  ‚Ä¢ ‚úÖ Interfaz intuitiva
  ‚Ä¢ ‚úÖ Gesti√≥n de permisos
  ‚Ä¢ ‚úÖ Optimizaci√≥n de rendimiento
  ‚Ä¢ ‚úÖ Arquitectura modular y extensible


[IMPORTANTE] Cumplimiento Acad√©mico:

  ‚Ä¢ ‚úÖ M√°s de 3 funcionalidades ML Kit diferentes
  ‚Ä¢ ‚úÖ Combinaci√≥n e integraci√≥n de tecnolog√≠as
  ‚Ä¢ ‚úÖ Interfaz intuitiva y moderna
  ‚Ä¢ ‚úÖ Procesamiento offline y online
  ‚Ä¢ ‚úÖ Visualizaci√≥n clara de resultados
  ‚Ä¢ ‚úÖ Gesti√≥n completa de historial
  ‚Ä¢ ‚úÖ Adaptaci√≥n para plataforma especializada (Android)

Esta documentaci√≥n t√©cnica detalla la implementaci√≥n completa de ML Translate App versi√≥n universitaria, desarrollada como proyecto acad√©mico integrando m√∫ltiples tecnolog√≠as de Machine Learning con arquitectura Android moderna.

